// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Circuit {
  id      Int     @id @default(autoincrement()) @db.UnsignedInt
  name    String  @unique(map: "idx_circuit_name_unique") @db.VarChar(255)
  city    String  @db.VarChar(255)
  country String  @db.VarChar(255)
  active  Boolean
  races   Race[]

  @@map("circuits")
}

model Race {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  date       DateTime @db.DateTime(0)
  laps       Int
  circuit_id Int      @db.UnsignedInt
  circuit    Circuit  @relation(fields: [circuit_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_circuit")
  results    Result[]

  @@map("races")
}

model Result {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  position  Int     @db.UnsignedMediumInt()
  points    Int     @db.MediumInt()
  status    String? @db.VarChar(255)
  race_id   Int     @db.UnsignedInt
  driver_id Int     @db.UnsignedInt
  car_id    Int     @db.UnsignedInt
  race      Race    @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_result_race")
  driver    Driver  @relation(fields: [driver_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_result_driver")
  car       Car     @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_result_car")

  @@map("results")
}

model Driver {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  first_name String  @db.VarChar(255)
  last_name  String  @db.VarChar(255)
  status     String? @db.VarChar(255)
  team_id    Int?    @db.UnsignedInt
  team       Team?   @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_driver_team")

  // for login
  email         String @unique(map: "idx_driver_email_unique") @db.VarChar(255)
  password_hash String @db.VarChar(255)
  roles         Json

  results Result[]

  @@map("drivers")
}

model Team {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @unique(map: "idx_team_name_unique") @db.VarChar(255)
  country   String?  @db.VarChar(255)
  join_date DateTime @db.DateTime(0)

  drivers Driver[]
  cars    Car[]

  @@map("teams")
}

model Car {
  id     Int    @id @default(autoincrement()) @db.UnsignedInt
  model  String @db.VarChar(255)
  weight Float  @db.Float
  year   Int    @db.UnsignedInt

  team_id Int  @db.UnsignedInt
  team    Team @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_car_team")

  results Result[]

  @@map("cars")
}
